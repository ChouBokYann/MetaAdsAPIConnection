import requests
import pygsheets as pyg
import pandas as pd
from datetime import date
from google.oauth2 import service_account
from datetime import timedelta
import deepdive


""" input number of past days of ad spend to be updated """
numDays = 3

""" input name of google sheet to be updated """
sheetname = "Ads spend"


""" 
updateAdSpend(days) should get meta ads data for the last n number of days (where days = n) from today, 
then append it to the ad spend google sheet (sheetname) with the openGSheet function
Note: days should be an integer type 
"""
def updateAdSpend(days, sheetname):
    today = date.today()
    backdate = today - timedelta(days=days) # get the date of the first day of ad spend to be updated

    if days == 1: # if only need to update yesterday's ad spend
       paramslist = [{'date_preset': 'yesterday'}]
    else: # if need to update multiple days
        paramslist = [] # append time range param for each day required into paramslist
        for i in range(days): 
            todaystr = str(backdate)
            year = todaystr[:4]
            month = todaystr[6:7]
            day = todaystr[-2:]
            rangestr = "{'since':'"+year+"-"+month+"-"+str(day)+"','until':'"+year+"-"+month+"-"+str(day)+"'}"
            paramslist.append({'time_range':rangestr})
            backdate = backdate + timedelta(days=1)


    """
    Expected params = {'time_range':"{'since':'2023-01-22','until':'2023-01-30'}"} OR {'date_preset': 'yesterday'}
    """
    def connectAPIforAU(params):
        access_token = 'ACCESS_KEY'
        my_headers = {'Authorization': 'Bearer ' + access_token}
        params = params 
        response = requests.get('request_link', headers=my_headers, params=params)
        result = response.json()
        return result


    def connectFBforMY(params):
        access_token = 'ACCESS_KEY'
        my_headers = {'Authorization': 'Bearer ' + access_token}
        params = params
        response = requests.get('request_link', headers=my_headers, params=params)
        result = response.json()
        return result


    def connectLZDforMY(params):
        access_token = 'ACCESS_KEY'
        my_headers = {'Authorization': 'Bearer ' + access_token}
        params = params
        response = requests.get('request_link', headers=my_headers, params=params)
        result = response.json()
        return result


    def connectSPforMY(params):
        access_token = 'ACCESS_KEY'
        my_headers = {'Authorization': 'Bearer ' + access_token}
        params = params
        response = requests.get('request_link', headers=my_headers, params=params)
        result = response.json()
        return result

    def connectLZDToPH(params):
        access_token = 'ACCESS_KEY'
        my_headers = {'Authorization': 'Bearer ' + access_token}
        params = params
        response = requests.get('request_link', headers=my_headers, params=params)
        result = response.json()
        return result


    """
    parseThroughJson returns total ad spend amount from a json dictionary
    Note: data parameter should be a json
    """
    def parseThroughJson(data):
        for i in data['data']:
            return (i['spend'])

    
    deepDF = deepdive.deepDive(['AD_ACCOUNT'], days) # deepDive should return a pandas DF of all MY main campaigns info for the last days num of days
    deepDF['spend_float'] = deepDF['spend'].astype(float) # create new df column for spend (convert from str to float)



    # Opening the google sheet
    def openGSheet(sheetname):

        gc = pyg.authorize(service_account_file='./creds.json') # creds.json file generated by account with access to google sheet
        spreadsheet = gc.open(sheetname)
        worksheetAU = spreadsheet.worksheet_by_title('AU Ads spend')
        worksheetMY = spreadsheet.worksheet_by_title('MY Ads Spend')
        worksheetPH = spreadsheet.worksheet_by_title('PH Ads spend')
        forex_sheet = spreadsheet.worksheet_by_title("Exchange Rate")
        currAUdf = worksheetAU.get_as_df() # get current sheet as a DF
        currMYdf = worksheetMY.get_as_df()
        currPHdf = worksheetPH.get_as_df()
        forex = forex_sheet.get_as_df()

        myr = forex[forex["Country"]=='Malaysia']['Exchange Rate'][2] # get current exchange rate from google sheet
        pesos = forex[forex["Country"]=='Philippines']['Exchange Rate'][0]
        # commented out aud exchange rate because currency already in AUD on ads manager
        # aud = forex[forex["Country"]=='Australia']['Exchange Rate'][1]

        curr = today - timedelta(days = days)
        currdmy = curr.strftime("%d/%m/%y") # get date as dd/mm/yy
        
        for params in paramslist:

            SPdata = connectSPforMY(params)
            AUdata = connectAPIforAU(params)
            FBdata = connectFBforMY(params)
            LZDdata = connectLZDforMY(params)
            PHLZDdata = connectLZDToPH(params)

            AUad_spend = parseThroughJson(AUdata) # get total ad spend for the day for each ad account
            FBad_spend = parseThroughJson(FBdata)
            LZDad_spend = parseThroughJson(LZDdata)
            SPad_spend = parseThroughJson(SPdata)
            PhadspendFB = parseThroughJson(PHLZDdata) 

            currMth = currdmy[3:5] # get current month from currdmy
            currDay = currdmy[0:2] # get current day from currdmy
            
            IOIspend = deepDF.loc[(deepDF['campaign_name'].str.contains("IOI")) & (deepDF['date'].str.slice(start=-2) == currDay) & (deepDF['date'].str.slice(start=-5, stop=-3) == currMth), 'spend_float'].sum() # get RETAIL STORE ad spend for the day
            SWspend = deepDF.loc[(deepDF['campaign_name'].str.contains("Sunway")) & (deepDF['date'][-2:] == currDay) & (deepDF['date'][-5:-3] == currMth), 'spend_float'].sum() # get sunway retail ad spend for the day
            FBad_spend = float(FBad_spend) - (IOIspend + SWspend) # get non-retail ad spend for the day for MY main (to be updated as Shopify)

            newrowAU = pd.DataFrame({"Order Date": [currdmy, currdmy], "Platform": ["Shopify", "Amazon"], "Facebook": [round(float(AUad_spend),2), ""], "Google": ["", ""], "Amazon": ["", ""]})
            currAUdf = pd.concat([currAUdf,newrowAU]) # append new rows for AU to df

            newrowMY = pd.DataFrame({" Date": [currdmy, currdmy, currdmy, currdmy, currdmy, currdmy], "Platform": ["Retail Store","Shopify", "Lazada", "Retail Store", "Tiktok", "Shopee"], "Facebook": [round(float(IOIspend)/float(myr),2), round(float(FBad_spend)/float(myr),2), "", round(float(SWspend)/float(myr),2), "", ""], "Google": ["", "", "", "", "", ""], "Facebook cpas": ["", "", int(float(LZDad_spend)/float(myr)), "", "", int(float(SPad_spend)/float(myr))], "Platform Sponsored Search": ["", "", "", "", "", ""]})
            currMYdf = pd.concat([currMYdf, newrowMY]) # append new rows for MY to df

            newrowPH = pd.DataFrame({"Country": ["Philippines","Philippines","Philippines"],"Order Date": [currdmy, currdmy, currdmy], "Platform": ["Lazada", "Shopee","Shopify"], "Facebook cpas": [round(float(PhadspendFB)/float(pesos),2), "", ""], "Platform Sponsored Search": ["", "", ""], "Platform Sponsored Affiliate": ["", "", ""], "Platform Sponsored Media": ["", "", ""]})
            currPHdf = pd.concat([currPHdf, newrowPH]) # append new rows for PH to df

            curr = curr + timedelta(days = 1)
            currdmy = curr.strftime("%d/%m/%y") # increment date to retrieve next day's ad spend

        worksheetAU.clear() # clear outdated wkst and reset it with new df with appended rows
        worksheetAU.set_dataframe(currAUdf, (1,1))

        worksheetMY.clear()
        worksheetMY.set_dataframe(currMYdf, (1,1))

        worksheetPH.clear()
        worksheetPH.set_dataframe(currPHdf, (1,1))


    return openGSheet(sheetname=sheetname)



""" input number of days and sheetname to be updated """
updateAdSpend(numDays, sheetname)